@inherits LayoutComponentBase
@inject Blazor.Fluxor.IStore Store

@using Blazor.Fluxor
@using Gumby.App.User.Store
@inject IState<UserState> UserState
@inject IDispatcher Dispatcher
@inject IUriHelper UriHelper

@Store.Initialize()

<MatDrawerContainer Style="width: 100vw; height: 100vh;">
    <MatDrawer @bind-Opened="@_isOpenDrawer" Mode="@MatDrawerMode.Modal">
        <MatList>
            <MatListItem Href="@LoginUrl"> <MatIconButton Icon="@MatIconNames.Person"></MatIconButton> @UserState.Value.User.Username </MatListItem>
            <MatListDivider></MatListDivider>
            <MatListItem OnClick="@ToggleDrawer" Href="/"> <MatIconButton Icon="@MatIconNames.Pages"></MatIconButton> Journal </MatListItem>
            <MatListDivider></MatListDivider>
            <MatListItem OnClick="@ToggleDrawer" Href="/routes"> <MatIconButton Icon="@MatIconNames.Flag"></MatIconButton> Routes </MatListItem>
        </MatList>
    </MatDrawer>
    <MatDrawerContent>
        <MatAppBarContainer>
            <MatAppBar Fixed="true">
                <MatAppBarRow>
                    <MatAppBarSection>
                        <MatIconButton OnClick="@ToggleDrawer" Icon="menu"></MatIconButton>
                        <MatAppBarTitle>Gumby</MatAppBarTitle>
                    </MatAppBarSection>
                    <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                        <MatIconButton Icon="@MatIconNames.Search"></MatIconButton>
                    </MatAppBarSection>
                </MatAppBarRow>
            </MatAppBar>
            <MatAppBarContent>
                @Body
            </MatAppBarContent>
        </MatAppBarContainer>
    </MatDrawerContent>
</MatDrawerContainer>

@functions{
    private bool _isOpenDrawer = false;

    private string LoginUrl
    {
        get
        {
            var currentUri = UriHelper.GetAbsoluteUri();
            var host = new Uri(currentUri).Host;
            var clientId = new Guid("62c98281-193a-4884-a3a3-131eac593dff");
            if (host.Contains("jimhillr.dev"))
            {
                clientId = new Guid("1f14efd2-38c7-4dbd-a834-6b07233e1fb2");
            }
            var uriBuilder = new UriBuilder();
            uriBuilder.Scheme = "https";
            uriBuilder.Host = "6umby.b2clogin.com";
            uriBuilder.Path = "6umby.onmicrosoft.com/oauth2/v2.0/authorize";
            uriBuilder.Query =
                "p=B2C_1_GumbySignUpSignIn" +
                "&client_id=" + clientId.ToString() +
                "&nonce=defaultNonce" +
                "&redirect_uri=" + currentUri +
                "&scope=openid" +
                "&response_type=id_token" +
                "&prompt=login";
            return uriBuilder.ToString();
        }
    }
    private string _newUserName;
    public string NewUserName
    {
        get => _newUserName;
        set
        {
            _newUserName = value;
            this.StateHasChanged();
        }
    }

    void ToggleDrawer()
    {
        _isOpenDrawer = !_isOpenDrawer;
    }
}
