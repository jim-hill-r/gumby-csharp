@layout MainLayout
@page "/"
@page "/index.html"

@using Blazor.Fluxor
@using Gumby.App.Climb.Journal.Store
@using Gumby.Climb.Journal.Contract
@using Gumby.Climb.Journal.Domain
@using Gumby.Climb.Route.Contract
@inject IState<JournalState> JournalState
@inject IDispatcher Dispatcher
@inject IUriHelper UriHelper

<style>
    .app-fab--fixed {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
    }
</style>

@if (JournalState.Value.Journals.Count == 0)
{
    <MatCard>
        <h3> Welcome to Gumby Climb!</h3>
        <p> Click the blue + button below to add your first climb journal entry.</p>
    </MatCard>
}
else
{
    @foreach (var journal in JournalState.Value.Journals)
    {
        <MatCard>
            <h3>
                @journal.Name
                @if (@journal.OccurredAt.HasValue)
                {
                    <span style="margin-left:10px;">
                        @journal.OccurredAt.Value.UtcDateTime.ToLocalTime().ToString("g")
                    </span>
                }
            </h3>
            @if (journal.ProtectionType.HasValue)
            {
                <div> Style: @journal.ProtectionType.Value.GetDisplayName()</div>
            }

            <div>
                Route:
                @if (JournalState.Value.RouteNames.ContainsKey(journal.Id))
                {
                    @JournalState.Value.RouteNames[journal.Id]
                }
                else
                {
                    <i> Searching for route based on journal analysis....</i>
                }
            </div>
        </MatCard>
    }

}

<MatFAB class="app-fab--fixed" OnClick="@OpenAddJournalModal" Icon="@MatIconNames.Add"></MatFAB>

<MatDialog IsOpen="@_isOpenAddJournalModal">
    <MatDialogTitle>New Climb Entry</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @bind-Value="@NewJournalName" Label="Name"></MatTextField>
        <MatSelect @bind-Value="@NewJournalProtection" Label="Style">
            @foreach (var protection in _protectionTypes)
            {
                <MatOption Value="@protection.ToString()">@protection.GetDisplayName()</MatOption>
            }
        </MatSelect>
        <input type="file" accept="image/x-png,image/jpg,image/gif"/>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@CancelAddJournalClicked">Cancel</MatButton>
        <MatButton OnClick="@OkAddJournalClicked">OK</MatButton>
    </MatDialogActions>
</MatDialog>

@functions{

    private IList<ProtectionType> _protectionTypes = ProtectionTypeHelper.GetAll();
    private bool _isOpenAddJournalModal = false;

    private string _newJournalName;
    public string NewJournalName
    {
        get => _newJournalName;
        set
        {
            _newJournalName = value;
            this.StateHasChanged();
        }
    }

    private string _newJournalProtection;
    public string NewJournalProtection
    {
        get => _newJournalProtection;
        set
        {
            _newJournalProtection = value;
            this.StateHasChanged();
        }
    }

    protected override void OnInit()
    {
        JournalState.Subscribe(this);
        var token = new Uri(UriHelper.GetAbsoluteUri()).Fragment.Replace("#id_token=","");
        if(token.Length > 0)
        {
            //TODO: Throw logged in action
            UriHelper.NavigateTo("/index.html");
        }
    }

    void OpenAddJournalModal()
    {
        NewJournalName = JournalHelper.GetNewName(DateTime.Now);
        if (JournalState.Value.Journals.Count > 0)
        {
            NewJournalProtection = JournalState.Value.Journals[0].ProtectionType.ToString();
        }
        else
        {
            NewJournalProtection = ProtectionType.BOULDER.ToString();
        }
        _isOpenAddJournalModal = true;
    }

    void OkAddJournalClicked()
    {
        var addJournalAction = new AddJournalAction();
        addJournalAction.Name = NewJournalName;

        ProtectionType protectionType;
        if (Enum.TryParse(NewJournalProtection, out protectionType))
        {
            addJournalAction.ProtectionType = protectionType;
        }

        Dispatcher.Dispatch(addJournalAction);
        _isOpenAddJournalModal = false;
    }

    void CancelAddJournalClicked()
    {
        _isOpenAddJournalModal = false;
    }
}